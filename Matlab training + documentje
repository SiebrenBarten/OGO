clear all;

% Load the mat-file. Example file has 3 columns (distance, force, time) 
load('TensileTest.mat'); % file

% Extract the columns
Dist = Data(:, 1).*1e-3; % distance in [m]
Force = Data(:, 2); % force in [N]
Time = Data(:, 3); % time in [s]

%% Plot arrays
plot(Time); hold on; 
plot(Dist); 
plot(Force); hold off;
xlabel('x'); ylabel('y');
title('title');
legend('Time', 'Dist', 'Force','location', 'southeastoutside');
% Parameters: sample measurements xyz. example (25.2 x 10 x 2 [mm])
Sample_X = 10*1e-3 % [m] thickness
Sample_Y = 2*1e-3 % [m] width
Sample_Z = 25.2*1e-3 % [m] lenght

surface_area = Sample_X * Sample_Y %[m^2]

stress = Force ./ surface_area;
% determine stress by index 80 : stress(80)

% new array: engineering strain
engineering_strain = (Dist-L)/L; 
plot(engineering_strain, stress, 'b-');
xlabel('strain');
ylabel('stress');
title('Strain-Stress');
% plot the data and select the outlier using getpts
plot(stress);
[x, y] = getpts;
[~, idx] = min(abs(x-(1:length(stress))')); % find the index of the outlier
% replace the outlier with the average of its two neighboring values
if idx > 1 && idx < length(stress)
    stress(idx) = (stress(idx-1) + stress(idx+1))/2; %rekend gemiddeld uit van putnen rondom de outlier
end

stressReg = stress % new name, for array without outlier
% plot updated data
figure;
plot(stressReg);
% generate a noisy stress signal
signalNosy = stressReg;

% define the weight array for filtering
L = 11; 
weights = ones(L,1)/L;

% apply the filter using convolution
signalFilt = conv(signalNosy, weights, 'same');

% plot the original and filtereed signals
figure;
plot(signalNosy, 'b'); hold on; 
plot(signalFilt, 'r'); hold off;
% fit a first-order polynomial to the stress-strain
p = polyfit(engineering_strain, stressReg, 1);
% extract the slope of the polynomial (i.e., the Young's modulus)
youngs_modulus = p(1);

% stress-strain curve and the fitted line
figure;
plot(engineering_strain, stressReg, 'b'); hold on;
plot(engineering_strain, polyval(p,engineering_strain), 'r--');
mean(diff(engineering_strain));

clear all;

% parameters

E_m = 3e9; % Young's modulus of the matrix (berekenen, via trekbank)
E_f = 200e9; % Young's modulus of the fibers (berekenen, via trekbank)
V_f = 0.5; % Volume fraction of the fibers (berekenen, via bioassay)
nu_m = 0.3; % Poisson's ratio of the matrix (berekenen, via trekbank)
alpha = 0; % angle of the fibers with respect to the applied load (berekenen, via weefsel snijden)
theta = 0:1:90; % Range of angles to plot (in degrees)

% effectieve Young's modulus, as function of the parameters
E_eff = E_m * (1 + nu_m * (V_f * E_f / E_m - 1) * cosd(theta).^2) ./ (1 - V_f * nu_m * cosd(theta).^2);

% curve realation effectieve Young's modulus - fiber angle
plot(theta, E_eff/1e9, 'LineWidth', 2);
xlabel('Angle of fibers with respect to applied load (degrees)');
ylabel('Effective Young''s modulus (GPa)');
title('Relationship between effective Young''s modulus and fiber angle');

% curve relation effectieve Young's modulus and number of fibers (fiber
% volume)
% Input material parameters
theta = 30;     % Angle of fibers with respect to applied load (degrees)

% Range of volume fractions to plot
V_f = linspace(0, 0.5, 101);

% Calculate the effective Young's modulus for each volume fraction
E_eff = E_m * (1 + nu_m * (V_f * E_f / E_m - 1) * cosd(theta).^2) ./ (1 - V_f * nu_m * cosd(theta).^2);

% Plot the curve
plot(V_f, E_eff/1e9, 'LineWidth', 2);
xlabel('Volume fraction of fibers');
ylabel('Effective Young''s modulus (GPa)');
title('Relationship effective Young''s modulus and fiber volume fraction (theta = 45)');

% secundairy fibers (De opdracht die in dat Matlab documentje stond)

% Given parameters
V_fiber1 = 0.05;
E_fiber1 = 10e6;
alpha_fiber1 = 15*pi/180;
V_matrix = 0.45;
E_matrix = 35e3;
E_fiber2 = 1e6;

% Range of secondary fiber volume fraction and angle
V_fiber2_range = linspace(0, 0.2, 50);
alpha_fiber2_range = linspace(0, pi/2, 50);

% Initialize matrices to store results
E_eff_vfiber2 = zeros(size(V_fiber2_range));
E_eff_afiber2 = zeros(size(alpha_fiber2_range));

% Calculate effective Young's modulus for varying V_fiber2 and alpha_fiber2
for i = 1:length(V_fiber2_range)
    V_fiber2 = V_fiber2_range(i);
    E_eff_vfiber2(i) = V_fiber1*E_fiber1*cos(alpha_fiber1)^2 + V_fiber2*E_fiber2*cos(alpha_fiber1)^2 + V_matrix*E_matrix;
end

for i = 1:length(alpha_fiber2_range)
    alpha_fiber2 = alpha_fiber2_range(i);
    E_eff_afiber2(i) = V_fiber1*E_fiber1*cos(alpha_fiber1)^2 + V_fiber2*E_fiber2*cos(alpha_fiber2)^2 + V_matrix*E_matrix;
end

% Plot the results
figure;
plot(V_fiber2_range, E_eff_vfiber2, 'LineWidth', 2);
xlabel('V_{fiber2}');
ylabel('Effective Young''s Modulus');
title('Effect of Secondary Fiber Volume Fraction');

figure;
plot(alpha_fiber2_range*180/pi, E_eff_afiber2, 'LineWidth', 2);
xlabel('\alpha_{fiber2} (deg)');
ylabel('Effective Young''s Modulus');
title('Effect of Secondary Fiber Angle');
